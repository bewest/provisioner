openapi: 3.0.2
servers:
  - url: 'http://p0.internal.diabetes.watch'
info:
  description: >-
    Manage hosted databases and associated sites.
    You can learn more abou [provisioner](https://github.com/bewest/provisioner)
  version: 0.0.1
  title: Provisioner DB API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: bewest@gmail.com
  license:
    name: BSD 3
tags:
  - name: account
    description: Environment for a process.
  - name: cluster
    description: Manages processes by cluster.
  - name: db 
    description: Environment for a process.
  - name: env
    description: Environment for a process.
  - name: proc
    description: Access to proc managed by cluster.
  - name: site
    description: Environment for a process.
  - name: user
    description: Environment for a process.
paths:
  '/dbs':
    get:
      tags:
        - db
      operationId: get_db_list
      summary: Get list of managed dbs.
      description: JSON description of all currently managed dbs.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseList'
        '400':
          description: Invalid status value
  '/dbs/{name}':
    get:
      tags:
        - db
      operationId: get_named_db
      summary: Running database by name.
      description: Returns details of a database by `name`.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '400':
          description: Invalid ID supplied
        '404':
          description: Database not found
      deprecated: true
      parameters:
        - in: path
          description: "Name of managed database."
          required: true
          name: name
          schema:
            type: string
  '/accounts':
    get:
      tags:
        - account 
      summary: Get list of accounts.
      operationId: get_accounts_list
      description: >-
        Returns description of all db accounts.
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - account 
      summary: Create new managed database account.
      operationId: create_new_db_with_account
      description: >-
        Returns description of all db accounts.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreationInput'
        description: Environment to run defined process.
        required: true
      responses:
        '200':
          description: successful operation
  '/accounts/{account}':
    get:
      tags:
        - account 
      summary: Get accounts by account identifier.
      operationId: get_named_account
      description: >-
         Get one db accounts.
      parameters:
        - in: path
          name: account
          required: true
          description: "Account name"
          schema:
            type: string
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - account 
      summary: Delete accounts by account identifier.
      description: >-
         Delete one db account.
      operationId: delete_named_account
      parameters:
        - in: path
          name: account
          description: "Account name"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
  '/accounts/{account}/dbs':
    parameters:
      - in: path
        name: account
        description: "Account name"
        required: true
        schema:
          type: string
    get:
      tags:
        - account 
      summary: Get all dbs for accounts by account identifier.
      operationId: get_dbs_for_account
      description: >-
         Get all dbs associated with account.
      responses:
        '200':
          description: successful operation
  '/accounts/{account}/users':
    parameters:
      - in: path
        description: "Account ID. Must be valid mongo objectID"
        name: account
        required: true
        schema:
          type: string
    get:
      tags:
        - account 
        - user
      summary: Get list of managed db users for associated account.
      operationId: get_users_for_account
      description: >-
         Get list of managed db users for associated account.
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - account 
        - user
      summary: Create a new managed db users for associated account.
      operationId: create_user_for_account
      description: >-
         Create a new managed db user for associated account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationInput'
        description: Input to create credemtials for a DB.
        required: true
      responses:
        '200':
          description: successful operation
  '/accounts/{account}/users/{user}':
    parameters:
      - in: path
        description: "Account ID. Must be valid mongo objectID"
        name: account
        schema:
          type: string
        required: true
      - in: path
        description: "User ID. Must be valid mongo objectID"
        name: user 
        schema:
          type: string
        required: true
    get:
      tags:
        - account 
        - user
      summary: Get managed db user by id for associated account.
      operationId: get_user_for_account_by_id
      description: >-
         Get managed db user by id for associated account.
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - account 
        - user
      summary: Delete managed db user by id for associated account.
      description: >-
         Delete managed db user by id for associated account.
      operationId: delete_user_for_account_by_id
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - account 
        - user
      summary: Update a managed db user by id for associated account.
      operationId: update_user_for_account_by_id
      description: >-
         Update a managed db user by id for associated account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationInput'
        description: Input to create credemtials for a DB.
        required: true
      responses:
        '200':
          description: successful operation
  '/accounts/{account}/sites':
    parameters:
      - in: path
        description: "Account ID. Must be valid mongo objectID"
        name: account
        required: true
        schema:
          type: string
    get:
      tags:
        - account 
        - site
      summary: Get list of managed sites for associated account.
      operationId: get_sites_for_account
      description: >-
         Get list of managed sites for associated account.
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - account 
        - site
      summary: Create a new managed site for associated account.
      description: >-
         Create a new managed site for associated account.
      operationId: create_sites_for_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCreationInput'
        description: Input to create credemtials for a DB.
        required: true
      responses:
        '200':
          description: successful operation
  '/accounts/{account}/sites/{site}':
    parameters:
      - in: path
        description: "Account ID. Must be valid mongo objectID"
        name: account
        schema:
          type: string
        required: true
      - in: path
        description: "Site Name."
        name: site 
        schema:
          type: string
        required: true
    get:
      tags:
        - account 
        - site
      summary: Get managed site by id for associated account.
      operationId: get_site_for_account_by_site_id
      description: >-
         Get managed site by id for associated account.
      responses:
        '200':
          description: successful operation
    delete:
      tags:
        - account 
        - site
      summary: Delete managed site by id for associated account.
      description: >-
         Delete managed site by id for associated account.
      operationId: delete_site_for_account_by_site_id
      responses:
        '200':
          description: successful operation
    post:
      tags:
        - account 
        - site
      summary: Update a managed site by id for associated account.
      operationId: update_site_for_account_by_site_id
      description: >-
         Update a managed site by id for associated account.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCreationInput'
        description: Input to create credemtials for a DB.
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Site'

components:
  schemas:
    AccountCreationInput:
      type: object
      description: Managed Mongo Database.
      properties:
        name:
          description: Internally unique Name/ID of this record. 8 hex characters.
          type: string
        account:
          description: Account ID used to dereference account details.
          type: string
    UserCreationInput:
      type: object
      description: Input to create DB user credentials.
      properties:
        name:
          description: Defined name.
          type: string
        internal_name:
          description: Internally unique Name record.
          type: string
        salter:
          type: string
          description: Used as filler content.

    Database:
      type: object
      description: Managed Mongo Database.
      properties:
        name:
          type: string
          description: Name of Database.
        sizeOnDisk:
          type: int
          format: int64
          description: Size of database.
        empty:
          type: boolean
          description: Whether or not database is empty.
    DatabaseList:
      type: object
      description: List of managed databases.
      properties:
        databases:
          type: array
          description: Array of databases.
          items:
            $ref: '#/components/schemas/Database'
        totalSize:
          description: Total size of databases.
          type: integer
          format: int64
        ok:
          type: integer
          format: int64
          description: Mongo status response.
    SiteCreationInput:
      type: object
      description: Managed site consuming a database.
      properties:
        internal_name:
          description: Internally unique Name record.
          type: string
        salter:
          type: string
          description: Some random input associated with record.
        name:
          description: Defined name.
          type: string
        api_secret:
          description: API Secret for this site.
          type: string
        uploader_prefix:
          description: Prefix to use for uploaders.
          type: string
    Site:
      type: object
      description: Managed site consuming a database.
      properties:
        id:
          type: integer
          format: int64
          description: Site ID. AKA WEB_NAME.


  links: {}
  callbacks: {}
security: []
